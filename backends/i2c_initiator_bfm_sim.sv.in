/****************************************************************************
 * i2c_initiator_bfm_sim.sv
 ****************************************************************************/
{%
	set tblink_generators = ({
		"i2c_initiator_bfm_sv.sv" : "tblink.bfm_impl.sv",
		"i2c_initiator_bfm_vl.sv" : "tblink.bfm_impl.vl"
		})
 %}
 
module i2c_initiator_bfm_sim (
	input				clock,
	input				reset,
	input				scl_i,
	output				scl_o,
	output				scl_en_o,
	input				sda_i,
	output				sda_o,
	output				sda_en_o
	);
	
	// registers
	reg  [15:0] prer = 16'h100; // clock prescale register
	reg  [ 7:0] ctr;  // control register
	reg  [ 7:0] txr;  // transmit register
	wire [ 7:0] rxr;  // receive register
	reg  [ 7:0] cr;   // command register
	wire [ 7:0] sr;   // status register

	reg cmd_start = 1'b0;
	reg cmd_start_v = 1'b0;
	reg cmd_stop = 1'b0;
	reg cmd_stop_v = 1'b0;
	reg cmd_read = 1'b0;
	reg cmd_read_v = 1'b0;
	reg cmd_write = 1'b0;
	reg cmd_write_v = 1'b0;
	reg[7:0] dat_write = 8'b0;
	wire[7:0] dat_read;
	reg xmit_ack = 1'b1; // ack bit sent with data
	wire recv_ack; // ack received with data
	
	wire i2c_busy;
	wire i2c_al;
	
	reg in_reset = 0;
	reg core_en = 1'b1;
	
	reg state;
	
	always @(posedge clock or posedge reset) begin
		if (reset) begin
			in_reset <= 1'b1;
			state <= 1'b0;
		end else begin
			if (in_reset) begin
				in_reset <= 1'b0;
				_reset();
			end
			
			case (state)
			0: begin
				if (cmd_stop_v | cmd_read_v | cmd_write_v) begin
					cmd_start <= cmd_start_v;
					cmd_stop <= cmd_stop_v;
					cmd_read <= cmd_read_v;
					cmd_write <= cmd_write_v;
					cmd_start_v = 0;
					cmd_stop_v = 0;
					cmd_read_v = 0;
					cmd_write_v = 0;
					state <= 1;
				end
			end
			1: begin
				if (cmd_ack) begin
					cmd_start <= 1'b0;
					cmd_stop <= 1'b0;
					cmd_read <= 1'b0;
					cmd_write <= 1'b0;
					_ack_cmd(dat_read, 0);
					state <= 0;
				end
			end
			endcase
		end
	end
	
	// hookup byte controller block
	i2c_initiator_byte_ctrl byte_controller (
		.clock    ( clock     ),
		.reset    ( reset     ),
		.ena      ( core_en      ),
		.clk_cnt  ( prer         ),
		.start    ( cmd_start    ),
		.stop     ( cmd_stop     ),
		.read     ( cmd_read     ),
		.write    ( cmd_write    ),
		.ack_in   ( xmit_ack     ),
		.din      ( dat_write    ),
		.cmd_ack  ( cmd_ack      ),
		.ack_out  ( recv_ack     ),
		.dout     ( dat_read     ),
		.i2c_busy ( i2c_busy     ),
		.i2c_al   ( i2c_al       ),
		.scl_i    ( scl_i    ),
		.scl_o    ( scl_o    ),
		.scl_oen  ( scl_en_o ),
		.sda_i    ( sda_i    ),
		.sda_o    ( sda_o    ),
		.sda_oen  ( sda_en_o )
	);	

	task _set_prescale(input reg[15:0] v);
	begin
		$display("_set_prescale: %0d", v);
		prer = v;
	end
	endtask
	
	task _cmd_start;
	begin
		cmd_start_v = 1'b1;
	end
	endtask
	
	task _cmd_stop;
	begin
		cmd_stop_v = 1'b1;
	end
	endtask
	
	task _cmd_read;
	begin
		cmd_read_v = 1'b1;
	end
	endtask
	
	task _cmd_write(
		input reg[7:0] data,
		input reg[7:0] start);
	begin
		cmd_write_v = 1'b1;
		dat_write = data;
		cmd_start_v = start;
	end
	endtask
	

// Note: Begin Generated Content. Do Not Edit
{{ tblink_gen(
	iftype="i2c_bfms.initiator",
	is_mirror=False,
	kind="bfm") }}
// Note: End Generated Content.
	
endmodule
